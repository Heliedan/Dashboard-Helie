<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bot Trading MEXC</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: #0f1419; color: #e8eaed; padding: 20px; }
        .header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 30px; padding: 20px; background: #1a1f2e; border-radius: 12px; }
        .header h1 { color: #4ade80; font-size: 24px; }
        .status-indicator { width: 12px; height: 12px; background: #4ade80; border-radius: 50%; animation: pulse 2s infinite; }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }
        .controls { display: flex; gap: 10px; margin-bottom: 20px; flex-wrap: wrap; }
        .btn { padding: 10px 20px; background: #4ade80; color: #0f1419; border: none; border-radius: 8px; cursor: pointer; font-weight: 600; transition: all 0.3s; }
        .btn:hover { background: #22c55e; transform: translateY(-2px); }
        .btn.secondary { background: #2d3748; color: #e8eaed; }
        .btn.secondary:hover { background: #4a5568; }
        .btn.danger { background: #ef4444; color: #fff; }
        .btn.danger:hover { background: #dc2626; }
        .cards-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { background: #1a1f2e; padding: 24px; border-radius: 12px; border: 1px solid #2d3748; }
        .card-label { color: #9ca3af; font-size: 12px; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 8px; }
        .card-value { font-size: 32px; font-weight: 700; color: #e8eaed; margin-bottom: 8px; }
        .card-subtitle { font-size: 14px; color: #9ca3af; }
        .card-change { font-size: 14px; font-weight: 600; margin-top: 4px; }
        .positive { color: #4ade80; }
        .negative { color: #ef4444; }
        .section { background: #1a1f2e; padding: 24px; border-radius: 12px; margin-bottom: 20px; border: 1px solid #2d3748; }
        .section-title { font-size: 14px; color: #9ca3af; text-transform: uppercase; letter-spacing: 1px; margin-bottom: 20px; }
        .auto-controls { display: flex; align-items: center; gap: 20px; flex-wrap: wrap; }
        .switch { position: relative; display: inline-block; width: 60px; height: 34px; }
        .switch input { opacity: 0; width: 0; height: 0; }
        .slider { position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background: #2d3748; transition: .4s; border-radius: 34px; }
        .slider:before { position: absolute; content: ""; height: 26px; width: 26px; left: 4px; bottom: 4px; background: #e8eaed; transition: .4s; border-radius: 50%; }
        input:checked + .slider { background: #4ade80; }
        input:checked + .slider:before { transform: translateX(26px); }
        .auto-status { display: flex; flex-direction: column; gap: 8px; }
        .auto-status-label { color: #9ca3af; font-size: 12px; text-transform: uppercase; letter-spacing: 1px; }
        .auto-status-value { color: #4ade80; font-weight: 600; font-size: 18px; }
        .auto-status-value.inactive { color: #6b7280; }
        .interval-input { display: flex; align-items: center; gap: 10px; }
        .interval-input input { padding: 8px 12px; background: #0f1419; border: 1px solid #2d3748; border-radius: 6px; color: #e8eaed; width: 80px; font-size: 14px; }
        .interval-input label { color: #9ca3af; font-size: 14px; }
        .params-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; }
        .param-item { display: flex; justify-content: space-between; align-items: center; }
        .param-label { color: #9ca3af; }
        .param-value { color: #4ade80; font-weight: 600; font-size: 18px; }
        table { width: 100%; border-collapse: collapse; }
        thead { background: #0f1419; }
        th { padding: 12px; text-align: left; font-size: 12px; text-transform: uppercase; letter-spacing: 1px; color: #9ca3af; border-bottom: 2px solid #2d3748; }
        td { padding: 16px 12px; border-bottom: 1px solid #2d3748; }
        tr:hover { background: #1a1f2e; }
        .badge { padding: 4px 12px; border-radius: 12px; font-size: 11px; font-weight: 600; text-transform: uppercase; }
        .badge.completed { background: #065f46; color: #4ade80; }
        .badge.pending { background: #713f12; color: #fbbf24; }
        .badge.buy { background: #1e3a8a; color: #60a5fa; }
        .badge.sell { background: #c2410c; color: #fb923c; }
        .loading { text-align: center; padding: 40px; color: #9ca3af; }
        .chart-container { position: relative; height: 300px; margin-top: 20px; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1a1f2e; }
        ::-webkit-scrollbar-thumb { background: #4a5568; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #718096; }
    </style>
</head>
<body>
    <div class="header">
        <div>
            <h1>ü§ñ Bot Trading MEXC</h1>
            <small style="color:#9ca3af;">Actualisation: <span id="lastUpdate">--:--:--</span></small>
        </div>
        <div class="status">
            <div class="status-indicator"></div>
            <span>Bot Actif</span>
        </div>
    </div>

    <div class="section">
        <div class="section-title">Mode Automatique</div>
        <div class="auto-controls">
            <label class="switch">
                <input type="checkbox" id="autoToggle" onchange="toggleAuto()">
                <span class="slider"></span>
            </label>
            <div class="auto-status">
                <div class="auto-status-label">Statut</div>
                <div class="auto-status-value inactive" id="autoStatusText">Inactif</div>
            </div>
            <div class="interval-input">
                <label>Intervalle:</label>
                <input type="number" id="intervalInput" value="30" min="0.167" max="1440" step="0.1" onchange="updateInterval()">
                <span style="color:#9ca3af;">minutes</span>
            </div>
            <div class="auto-status">
                <div class="auto-status-label">Prochain cycle dans</div>
                <div class="auto-status-value" id="countdown">--</div>
            </div>
        </div>
    </div>

    <div class="controls">
        <button class="btn" onclick="refreshData()">üîÑ Actualiser</button>
        <button class="btn" onclick="createNewCycle()">‚ûï Nouveau Cycle</button>
        <button class="btn" onclick="updateCycles()">üîç Update Cycles</button>
        <button class="btn danger" onclick="cancelCycle()">‚ùå Cancel Cycle</button>
        <button class="btn secondary" onclick="exportData()">üì• Exporter CSV + JSON</button>
    </div>

    <div class="cards-grid">
        <div class="card">
            <div class="card-label">Balance USDC</div>
            <div class="card-value">$<span id="usdcBalance">0</span></div>
            <div class="card-subtitle">Total</div>
        </div>
        <div class="card">
            <div class="card-label">Balance BTC</div>
            <div class="card-value"><span id="btcBalance">0</span></div>
            <div class="card-subtitle">BTC</div>
        </div>
        <div class="card">
            <div class="card-label">Gain $</div>
            <div class="card-value">$<span id="gainAbs">0</span></div>
            <div class="card-change positive">+<span id="gainPercent">0</span>%</div>
        </div>
        <div class="card">
            <div class="card-label">Prix BTC Actuel</div>
            <div class="card-value">$<span id="btcPrice">0</span></div>
            <div class="card-subtitle">CoinGecko</div>
        </div>
    </div>

    <div class="section">
        <div class="section-title">Parametres de Trading</div>
        <div class="params-grid">
            <div class="param-item">
                <span class="param-label">Buy Offset</span>
                <span class="param-value" id="buyOffset">-400</span>
            </div>
            <div class="param-item">
                <span class="param-label">Sell Offset</span>
                <span class="param-value" id="sellOffset">+500</span>
            </div>
            <div class="param-item">
                <span class="param-label">Capital par cycle</span>
                <span class="param-value" id="percentPerCycle">3%</span>
            </div>
        </div>
    </div>

    <div class="section">
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;">
            <div class="section-title" style="margin:0;">Cycles Actifs</div>
        </div>
        <div style="overflow-x:auto;">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Prix</th>
                        <th>Quantite</th>
                        <th>Gain %</th>
                        <th>Gain $</th>
                    </tr>
                </thead>
                <tbody id="activeCyclesTable">
                    <tr><td colspan="6" class="loading">Chargement...</td></tr>
                </tbody>
            </table>
        </div>
    </div>

    <div class="section">
        <div class="section-title">Performance</div>
        <div class="chart-container">
            <canvas id="performanceChart"></canvas>
        </div>
    </div>

    <div class="section">
        <div style="display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;">
            <div class="section-title" style="margin:0;">Tous les Cycles
                <small style="margin-left:10px;font-weight:normal;">
                    <span id="completedCount">0</span>/<span id="totalCount">0</span> completes
                </small>
            </div>
        </div>
        <div style="overflow-x:auto;">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Status</th>
                        <th>Quantite BTC</th>
                        <th>Prix Achat</th>
                        <th>Prix Vente</th>
                        <th>Gain %</th>
                        <th>Gain $</th>
                    </tr>
                </thead>
                <tbody id="cyclesTable">
                    <tr><td colspan="7" class="loading">Chargement...</td></tr>
                </tbody>
            </table>
        </div>
    </div>

    <script>
        let performanceChart = null;
        let allPerformanceData = [];

        function formatNumber(n, d) {
            return Number(n).toLocaleString('fr-FR', {
                minimumFractionDigits: d,
                maximumFractionDigits: d
            });
        }

        function getStatusBadge(s) {
            const mapping = {
                'completed': 'completed',
                'order_buy_placed': 'buy',
                'order_buy_filled': 'buy',
                'buy': 'buy',
                'order_sell_placed': 'sell',
                'sell': 'sell'
            };
            const className = mapping[s] || 'pending';
            return '<span class="badge ' + className + '">' + s + '</span>';
        }

        async function refreshAutoStatus() {
            try {
                const response = await fetch('/api/auto-status');
                const data = await response.json();
                
                document.getElementById('autoToggle').checked = data.enabled;
                document.getElementById('intervalInput').value = data.interval_minutes;
                
                const statusText = document.getElementById('autoStatusText');
                const countdown = document.getElementById('countdown');
                
                if (data.enabled) {
                    statusText.textContent = 'Actif';
                    statusText.classList.remove('inactive');
                    
                    if (data.minutes_remaining !== null) {
                        const mins = Math.floor(data.minutes_remaining);
                        const secs = Math.floor((data.minutes_remaining - mins) * 60);
                        countdown.textContent = mins + 'm ' + secs + 's';
                    } else {
                        countdown.textContent = 'Calcul...';
                    }
                } else {
                    statusText.textContent = 'Inactif';
                    statusText.classList.add('inactive');
                    countdown.textContent = '--';
                }
            } catch (e) {
                console.error('Erreur auto status:', e);
            }
        }

        async function toggleAuto() {
            const enabled = document.getElementById('autoToggle').checked;
            const interval = parseFloat(document.getElementById('intervalInput').value);
            
            if (enabled) {
                try {
                    const response = await fetch('/api/auto-start', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ interval_minutes: interval })
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        alert('‚úÖ ' + data.message);
                        refreshAutoStatus();
                    } else {
                        alert('‚ùå ' + data.error);
                        document.getElementById('autoToggle').checked = false;
                    }
                } catch (e) {
                    alert('‚ùå Erreur: ' + e);
                    document.getElementById('autoToggle').checked = false;
                }
            } else {
                try {
                    const response = await fetch('/api/auto-stop', { method: 'POST' });
                    const data = await response.json();
                    
                    if (data.success) {
                        alert('‚úÖ ' + data.message);
                        refreshAutoStatus();
                    } else {
                        alert('‚ùå ' + data.error);
                        document.getElementById('autoToggle').checked = true;
                    }
                } catch (e) {
                    alert('‚ùå Erreur: ' + e);
                    document.getElementById('autoToggle').checked = true;
                }
            }
        }

        async function updateInterval() {
            const interval = parseFloat(document.getElementById('intervalInput').value);
            
            if (interval < 0.167 || interval > 1440) {
                alert('Intervalle doit etre entre 10 secondes (0.167 min) et 1440 minutes');
                return;
            }
            
            const enabled = document.getElementById('autoToggle').checked;
            
            if (enabled) {
                try {
                    const response = await fetch('/api/auto-config', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ interval_minutes: interval })
                    });
                    const data = await response.json();
                    
                    if (data.success) {
                        alert('‚úÖ ' + data.message);
                    } else {
                        alert('‚ùå ' + data.error);
                    }
                } catch (e) {
                    alert('‚ùå Erreur: ' + e);
                }
            }
        }

        async function refreshData() {
            console.log('‚ü≥ Actualisation...');
            
            try {
                const response = await fetch('/api/data?t=' + Date.now(), { cache: 'no-store' });
                const data = await response.json();
                
                document.getElementById('usdcBalance').textContent = formatNumber(data.balances.usdc, 2);
                document.getElementById('btcBalance').textContent = formatNumber(data.balances.btc, 8);
                document.getElementById('gainAbs').textContent = formatNumber(data.stats.gain_abs, 2);
                document.getElementById('gainPercent').textContent = formatNumber(data.stats.gain_percent, 2);
                document.getElementById('btcPrice').textContent = formatNumber(data.balances.btc_price, 2);
                document.getElementById('completedCount').textContent = data.stats.completed_cycles;
                document.getElementById('totalCount').textContent = data.stats.total_cycles;
                document.getElementById('buyOffset').textContent = data.config.buy_offset;
                document.getElementById('sellOffset').textContent = '+' + data.config.sell_offset;
                document.getElementById('percentPerCycle').textContent = data.config.percent + '%';
                
                const activeCycles = data.cycles.filter(c => c.status !== 'completed');
                const activeTable = document.getElementById('activeCyclesTable');
                
                if (activeCycles.length === 0) {
                    activeTable.innerHTML = '<tr><td colspan="6" style="text-align:center;color:#9ca3af;">Aucun cycle actif</td></tr>';
                } else {
                    activeTable.innerHTML = activeCycles.map(c => {
                        const isBuy = c.status.includes('buy') || c.status === 'buy';
                        const type = isBuy ? 'buy' : 'sell';
                        const price = isBuy ? c.buyPrice : c.sellPrice;
                        
                        const buyAmount = c.buyPrice * c.quantity;
                        const sellAmount = c.sellPrice * c.quantity;
                        const gainPercent = ((sellAmount - buyAmount) / buyAmount * 100).toFixed(2);
                        const gainAbs = (sellAmount - buyAmount).toFixed(2);
                        
                        return '<tr><td>#' + c.id + '</td><td>' + getStatusBadge(type) + '</td><td>$' + formatNumber(price, 2) + '</td><td>' + formatNumber(c.quantity, 8) + '</td><td class="' + (gainPercent >= 0 ? 'positive' : 'negative') + '">' + gainPercent + '%</td><td class="' + (gainAbs >= 0 ? 'positive' : 'negative') + '">$' + gainAbs + '</td></tr>';
                    }).join('');
                }
                
                const allTable = document.getElementById('cyclesTable');
                
                if (data.cycles.length === 0) {
                    allTable.innerHTML = '<tr><td colspan="7" style="text-align:center;color:#9ca3af;">Aucun cycle</td></tr>';
                } else {
                    allTable.innerHTML = data.cycles.map(c => {
                        const buyAmount = c.buyPrice * c.quantity;
                        const sellAmount = c.sellPrice * c.quantity;
                        const gainPercent = ((sellAmount - buyAmount) / buyAmount * 100).toFixed(2);
                        const gainAbs = (sellAmount - buyAmount).toFixed(2);
                        
                        return '<tr><td>#' + c.id + '</td><td>' + getStatusBadge(c.status) + '</td><td>' + formatNumber(c.quantity, 8) + '</td><td>$' + formatNumber(c.buyPrice, 2) + '</td><td>$' + formatNumber(c.sellPrice, 2) + '</td><td class="' + (gainPercent >= 0 ? 'positive' : 'negative') + '">' + gainPercent + '%</td><td class="' + (gainAbs >= 0 ? 'positive' : 'negative') + '">$' + gainAbs + '</td></tr>';
                    }).join('');
                }
                
                document.getElementById('lastUpdate').textContent = data.last_update;
                console.log('‚úÖ Actualisation terminee');
            } catch (e) {
                console.error('‚ùå Erreur refresh:', e);
            }
        }

        async function loadPerformanceData() {
            try {
                const response = await fetch('/api/performance');
                allPerformanceData = await response.json();
                updatePerformanceChart();
            } catch (e) {
                console.error(e);
            }
        }

        function updatePerformanceChart() {
            const labels = allPerformanceData.map(d => d.cycle_id);
            const data = allPerformanceData.map(d => d.cumulative_gain);
            
            if (performanceChart) {
                performanceChart.destroy();
            }
            
            const ctx = document.getElementById('performanceChart').getContext('2d');
            performanceChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Gain cumule',
                        data: data,
                        borderColor: '#4ade80',
                        backgroundColor: 'rgba(74,222,128,0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4,
                        pointRadius: 0,
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: '#4ade80',
                        pointHoverBorderColor: '#fff',
                        pointHoverBorderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: {
                            backgroundColor: 'rgba(26,31,46,0.9)',
                            titleColor: '#e8eaed',
                            bodyColor: '#4ade80',
                            borderColor: '#4a5568',
                            borderWidth: 1,
                            padding: 12,
                            displayColors: false,
                            callbacks: {
                                label: function(context) {
                                    return 'Gain: $' + context.parsed.y.toFixed(2);
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: { color: '#2d3748', drawBorder: false },
                            ticks: {
                                color: '#9ca3af',
                                callback: function(value) {
                                    return '$' + value.toFixed(0);
                                }
                            }
                        },
                        x: {
                            grid: { display: false },
                            ticks: { color: '#9ca3af', maxRotation: 0, autoSkipPadding: 20 },
                            title: { display: true, text: 'Cycles', color: '#9ca3af', font: { size: 12 } }
                        }
                    },
                    interaction: { intersect: false, mode: 'index' }
                }
            });
        }

        async function createNewCycle() {
            if (!confirm('Creer un nouveau cycle de trading ?')) return;
            
            try {
                const response = await fetch('/api/new-cycle', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    alert('‚úÖ Nouveau cycle cree!');
                    setTimeout(async () => {
                        await refreshData();
                        await loadPerformanceData();
                    }, 1000);
                } else {
                    alert('‚ùå Erreur: ' + (data.error || data.output));
                }
            } catch (e) {
                alert('‚ùå Erreur: ' + e);
            }
        }

        async function updateCycles() {
            try {
                const response = await fetch('/api/update-cycles', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    alert('‚úÖ Cycles mis a jour!');
                    setTimeout(async () => {
                        await refreshData();
                        await loadPerformanceData();
                    }, 1000);
                } else {
                    alert('‚ùå Erreur: ' + (data.error || data.output));
                }
            } catch (e) {
                alert('‚ùå Erreur: ' + e);
            }
        }

        async function cancelCycle() {
            const cycleId = prompt('ID du cycle:');
            if (!cycleId || cycleId.trim() === '') return;
            if (!confirm('Annuler cycle #' + cycleId + ' ?')) return;
            
            try {
                const response = await fetch('/api/cancel-cycle', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ cycle_id: cycleId })
                });
                const data = await response.json();
                
                if (data.success) {
                    alert('‚úÖ Cycle #' + cycleId + ' annule!');
                    setTimeout(async () => {
                        await refreshData();
                        await loadPerformanceData();
                    }, 1000);
                } else {
                    alert('‚ùå Erreur: ' + (data.error || data.output));
                }
            } catch (e) {
                alert('‚ùå Erreur: ' + e);
            }
        }

        async function exportData() {
            try {
                const response = await fetch('/api/export', { method: 'POST' });
                const data = await response.json();
                
                if (data.success) {
                    const csvLink = document.createElement('a');
                    csvLink.href = '/download/csv';
                    csvLink.download = data.csv_file || 'cycles_export.csv';
                    document.body.appendChild(csvLink);
                    csvLink.click();
                    document.body.removeChild(csvLink);
                    
                    setTimeout(() => {
                        const jsonLink = document.createElement('a');
                        jsonLink.href = '/download/json';
                        jsonLink.download = data.json_file || 'cycles_export.json';
                        document.body.appendChild(jsonLink);
                        jsonLink.click();
                        document.body.removeChild(jsonLink);
                    }, 500);
                    
                    alert('‚úÖ T√©l√©chargement des exports lanc√©!');
                    setTimeout(refreshData, 1000);
                } else {
                    alert('‚ùå Erreur: ' + (data.error || data.output));
                }
            } catch (e) {
                alert('‚ùå Erreur: ' + e);
            }
        }

        console.log('üöÄ Dashboard initialise');
        refreshData();
        loadPerformanceData();
        refreshAutoStatus();
        setInterval(refreshData, 180000);
        setInterval(refreshAutoStatus, 10000);
    </script>
</body>
</html>
